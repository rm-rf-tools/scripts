#!/bin/bash

# --- Configuration ---
BASHRC_FILE=~/.bashrc
BASHRC_D_DIR=~/.bashrc.d
START_MARKER="##### bashrc.d start"
END_MARKER="##### bashrc.d end"
SKIP_PROMPTS=false

# --- Argument Parsing ---
if [[ "$1" == "-y" || "$1" == "--yes" ]]; then
  SKIP_PROMPTS=true
  echo "Running in non-interactive mode (-y). Prompts will be skipped."
fi

# --- Code Blocks and Functions ---

# The main block of code to be added to the .bashrc file
read -r -d '' BASHRC_BLOCK <<'EOF'
# Autogenerated by bashrc-dir-setup - Recursively sources files in ~/.bashrc.d

# Create a directory for bash configurations if it doesn't exist
if [ ! -d ~/.bashrc.d ]; then
  mkdir -p ~/.bashrc.d
  chmod 700 ~/.bashrc.d
  echo "Created ~/.bashrc.d directory. Please place your .bashrc configuration files in this directory."
fi

# Source all .bashrc files recursively
if [ -d ~/.bashrc.d ]; then
  find ~/.bashrc.d -type f -name "*.bashrc" | while read -r file; do
    # Only source files that are readable
    if [ -r "$file" ]; then
      source "$file"
    fi
  done
fi
EOF

# Function to safely create the starter files, checking each one
create_starter_files() {
    echo "Checking for starter configuration files..."
    local file_created=0

    # Define files and their content in arrays for easier management
    local files_to_create=("alias.bashrc" "env.bashrc" "func.bashrc" "path.bashrc")

    read -r -d '' alias_content <<'EOC'
# Autogenerated by bashrc-dir-setup.sh
# Place your command aliases in this file. (e.g., alias ll='ls -alF')
EOC
    read -r -d '' env_content <<'EOC'
# Autogenerated by bashrc-dir-setup.sh
# Place your environment variable exports in this file. (e.g., export EDITOR="vim")
EOC
    read -r -d '' func_content <<'EOC'
# Autogenerated by bashrc-dir-setup.sh
# Place your shell functions in this file. (e.g., mkcd() { mkdir -p "$1" && cd "$1"; })
EOC
    read -r -d '' path_content <<'EOC'
# Autogenerated by bashrc-dir-setup.sh
# Place your PATH modifications in this file. (e.g., export PATH="$HOME/.local/bin:$PATH")
EOC

    local contents_array=("$alias_content" "$env_content" "$func_content" "$path_content")

    # Loop through and create files if they don't exist
    for i in "${!files_to_create[@]}"; do
        local filename="${files_to_create[$i]}"
        local filepath="${BASHRC_D_DIR}/${filename}"
        local content="${contents_array[$i]}"

        if [ ! -f "$filepath" ]; then
            echo "-> Creating '${filename}'..."
            echo "$content" > "$filepath"
            file_created=1
        else
            echo "-> Skipping '${filename}' (already exists)."
        fi
    done

    if [ "$file_created" -eq 0 ]; then
        echo "All starter files already exist. No new files were created."
    fi
}


# --- Main Script Logic ---

# Check if the configuration block already exists
if grep -qF "$START_MARKER" "$BASHRC_FILE"; then
    echo "An existing bashrc.d configuration was found."
    
    if [ "$SKIP_PROMPTS" = true ]; then
        echo "Overriding existing configuration due to -y flag."
        REPLY="y" # Simulate a 'yes' answer
    else
        read -p "Do you want to override it? (y/N) " -n 1 -r
        echo # move to a new line
    fi

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "Removing existing configuration block..."
        # Use sed to delete the block between the markers. A backup will be created.
        sed -i.bak "/^$START_MARKER\$/,/^$END_MARKER\$/d" "$BASHRC_FILE"
        echo "Existing block removed. A backup was created at ${BASHRC_FILE}.bak"
    else
        echo "Operation cancelled. Your .bashrc file has not been changed."
        exit 0
    fi
fi

echo "Adding configuration to the end of $BASHRC_FILE..."

# Add the new block to the end of the .bashrc file
cat <<EOF >> "$BASHRC_FILE"

$START_MARKER
$BASHRC_BLOCK
$END_MARKER
EOF

echo "Core setup complete."

# Ensure the main directory exists before creating starter files
mkdir -p "$BASHRC_D_DIR"
chmod 700 "$BASHRC_D_DIR"

# Always attempt to create starter files (the function is safe)
create_starter_files

echo "All done!"
echo "Please run 'source ~/.bashrc' or open a new terminal for the changes to take effect."

exit 0
